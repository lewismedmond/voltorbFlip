
import pygame
import numpy as np
import random
from sys import exit

pygame.init()

def draw_board(board, row_hints, col_hints):
    for i in range(5):
        for j in range(5):
            if board[i][j] == -1:
                print("V", end=" ")
            else:
                print(board[i][j], end=" ")
        

def generate_board():
    board = np.zeros((5,5), dtype=int)
    for i in range(5):
        for j in range(5):
            rand = random.random()
            if rand < 0.3:
                board[i][j] = -1  # Voltorb
            elif rand < 0.7:
                board[i][j] = 1   # 1 point
            elif rand < 0.9:
                board[i][j] = 2   # 2 points
            else:
                board[i][j] = 3   # 3 points    
    return board

def generate_hint(board):
    row_hints = []
    col_hints = []
    for i in range(5):
        row_voltorbs = np.sum(board[i] == -1)
        row_points = np.sum(board[i][board[i] > 0])
        row_hints.append((row_voltorbs, row_points))
        
        col_voltorbs = np.sum(board[:,i] == -1)
        col_points = np.sum(board[:,i][board[:,i] > 0])
        col_hints.append((col_voltorbs, col_points))
    return row_hints, col_hints


currentBoard = generate_board()
colKeys, rowKeys = generate_hint(currentBoard)

class revealedTile(pygame.sprite.Sprite):
    def __init__(self, x, y, value):
        super().__init__()
        self.image = pygame.image.load("Graphics/blankTile.png")
        self.rect = self.image.get_rect(topleft = (x,y))
        self.value = value
        self.revealed = False
    def revealTile(self):
        self.revealed = True
        if(self.value == -1):
            self.image = pygame.image.load("Graphics/bombTile.png")
        if(self.value == 1):
            self.image = pygame.image.load("Graphics/one.png")
        if(self.value == 2):
            self.image = pygame.image.load("Graphics/two.png")
        if(self.value == 3):
            self.image = pygame.image.load("Graphics/three.png")

all_sprites = pygame.sprite.Group()
screen = pygame.display.set_mode((288,288))
pygame.display.set_caption("Voltorb Flip")
clock = pygame.time.Clock() # Initialize clock for controlling frame rate

for i in range(25):
    all_sprites.add(revealedTile(6+47*(i%5), 6+47*(i//5), currentBoard[i%5][i//5]))


gameFont = pygame.font.SysFont("Pixel Emulator", 16)






board_surface = pygame.image.load("Graphics/emptyBoard.png")
screen.blit(board_surface, (0, 0))         

for i,(voltorb, score) in enumerate(colKeys):
    voltorbCount = gameFont.render(str(voltorb), True, (0,0,0))
    pointTotal = gameFont.render(str(score).zfill(2), True, (0,0,0))
    screen.blit(voltorbCount, (i*47 +34,261))
    screen.blit(pointTotal, (i*47+22,241))

for i,(voltorb, score) in enumerate(rowKeys):
    voltorbCount = gameFont.render(str(voltorb), True, (0,0,0))
    pointTotal = gameFont.render(str(score).zfill(2), True, (0,0,0))
    screen.blit(voltorbCount, (270, i*47 + 27))
    screen.blit(pointTotal, (258, i*47+7))


while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            exit()
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            pos = pygame.mouse.get_pos()
            for tile in all_sprites:
                if tile.rect.collidepoint(pos) and not tile.revealed:
                    tile.revealTile()

    all_sprites.draw(screen) # Sprite rendering
    clock.tick(30)  # Limit frame rate to 30 FPS
    pygame.display.update()
